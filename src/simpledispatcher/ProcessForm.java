/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simpledispatcher;

import java.util.PriorityQueue;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MyIBM
 */
public final class ProcessForm extends javax.swing.JFrame {
    DefaultTableModel model;
    /**
     * Creates new form ProcessForm
     */
    
    PriorityQueue<Process> priorityDispatcher = new PriorityQueue<>();
    public ProcessForm() {
        initComponents();
        initializeQueue();
        populateDispatcherTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("add process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Process Priority");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "PID", "Status", "Priority", "Ready", "Block", "Kill"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, javax.swing.ImageIcon.class, javax.swing.ImageIcon.class, javax.swing.ImageIcon.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(!(jTextField1.getText().equals("") || jTextField1.getText() == null)){
            if(isInteger(jTextField1.getText(), 10)){
                priorityDispatcher.add(new Process(Process.pIdAssigner++, "ready", Integer.parseInt(jTextField1.getText()) ));
                resetTable();
                updateStatus();
                
            }
            else{
                JOptionPane.showMessageDialog(null, "please enter an number");
            }
        }else{
            JOptionPane.showMessageDialog(null, "please enter Process Id to add new process");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.rowAtPoint(evt.getPoint());
        int col = jTable1.columnAtPoint(evt.getPoint());
        //System.out.println(col);
         //System.out.println(row);
        if(col == 3){
            int pId = Integer.parseInt((jTable1.getValueAt(row, 0).toString()));
            resetTable();
            Random rand = new Random();
            int  randomPriority = rand.nextInt(1000) + 1;
            updateDispatcherQueue(pId,randomPriority,"ready");
           
        }
        else if(col == 4){
            
            int pId = Integer.parseInt((jTable1.getValueAt(row, 0).toString()));
            resetTable();
            updateDispatcherQueue(pId,Process.newPriorityAssigner--,"blocked");
           
        }
        else if(col == 5){
            int pId = Integer.parseInt((jTable1.getValueAt(row, 0).toString()));
            resetTable();
            deleteProcess(pId);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    void resetTable() {
     DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
     model.setRowCount(0);
    }
    //to validate if the process Id is an integer
    public boolean isInteger(String s, int radix) {
    if(s.isEmpty()) return false;
    for(int i = 0; i < s.length(); i++) {
        if(i == 0 && s.charAt(i) == '-') {
            if(s.length() == 1) return false;
            else continue;
        }
        if(Character.digit(s.charAt(i),radix) < 0) return false;
    }
    return true;
}
    
    //initializing the priority queue with some processes
    public void initializeQueue(){
    priorityDispatcher.add(new Process(Process.pIdAssigner++, "running", -1 ));
    priorityDispatcher.add(new Process(Process.pIdAssigner++, "ready", 11 ));
    priorityDispatcher.add(new Process(Process.pIdAssigner++, "ready", 9 ));
    }
    
    //populating the GUI table with the processes present in 
    public  void populateDispatcherTable(){
    PriorityQueue<Process> dispatcherCopy = new PriorityQueue<>(priorityDispatcher);
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    Object rowData[] = new Object[6]; 
    while(!dispatcherCopy.isEmpty()){
        Process process = dispatcherCopy.poll();
         rowData[0] = process.getpId();
         rowData[1] = process.getStatus();
         rowData[2] = process.getPriority();
         rowData[3] = process.getReadyIcon();
         rowData[4] = process.getBlockIcon();
         rowData[5] = process.getKillIcon();
         model.addRow(rowData);
        }
    }
    
    public void updateDispatcherQueue(int pId,int priority, String status){
    PriorityQueue<Process> dispatcherCopy = new PriorityQueue<>(priorityDispatcher);
    model = (DefaultTableModel) jTable1.getModel();
    Object rowData[] = new Object[6]; 
    while(!dispatcherCopy.isEmpty()) {
        Process process = dispatcherCopy.poll();
        if(process.getpId() == pId && !(status.equals(process.getStatus()))){ 
         rowData[0] = pId;
         rowData[1] = status;
         rowData[2] = priority;
         rowData[3] = process.getReadyIcon();
         rowData[4] = process.getBlockIcon();
         rowData[5] = process.getKillIcon();
         priorityDispatcher.remove(process);
         priorityDispatcher.add(new Process(pId,status,priority));
         
        }
      }
        updateStatus();
    
    }
    
    public void updateStatus(){
           if(isAnyProcessRunning())
        {
        populateDispatcherTable();
        return;
        }
      PriorityQueue<Process>  dispatcherCopy = new PriorityQueue<>(priorityDispatcher);
        while(!dispatcherCopy.isEmpty()) {
        Process process = dispatcherCopy.poll();
        if(process.getStatus().equals("ready")){ 
         priorityDispatcher.remove(process);
         priorityDispatcher.add(new Process(process.getpId(),"running",-1));
         break;
        }
      }
      populateDispatcherTable();
    
    }
    
    public boolean isAnyProcessRunning(){
    boolean processRunning = false;
    PriorityQueue<Process> dispatcherCopy = new PriorityQueue<>(priorityDispatcher);
    while(!dispatcherCopy.isEmpty()) {
        Process process = dispatcherCopy.poll();
        if(process.getStatus().equals("running")){ 
        processRunning = true;
        return processRunning;
        }
      }
    return processRunning;
    }
    
   //delete process from Dispatcher 
   public void deleteProcess(int pId) {
    PriorityQueue<Process> dispatcherCopy = new PriorityQueue<>(priorityDispatcher);
    while(!dispatcherCopy.isEmpty()) {
        Process process = dispatcherCopy.poll();
        if(process.getpId() == pId){  
         priorityDispatcher.remove(process);
         break;
        }
        }
    updateStatus();
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcessForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables


}
